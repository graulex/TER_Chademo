function StationCHAdeMO_App()
    % Cr√©e la fen√™tre principale de l'application
    f = figure('Name', 'Station CHAdeMO', ...
               'Position', [300 100 900 700], ...        % Position et taille [x y largeur hauteur]
               'NumberTitle', 'off', ...                 % D√©sactive l'affichage du num√©ro de figure
               'MenuBar', 'none', ...                    % Supprime la barre de menu
               'Resize', 'off', ...                      % Interdiction de redimensionner la fen√™tre
               'Color', [0.95 0.95 0.95]);               % Couleur de fond gris clair

    % Affiche un titre principal centr√© en haut
    uicontrol(f, 'Style', 'text', ...
              'String', 'üì° Interface Station CHAdeMO', ...
              'FontSize', 20, ...
              'FontWeight', 'bold', ...
              'FontName', 'Arial', ...
              'BackgroundColor', [0.95 0.95 0.95], ...
              'Position', [250 640 500 40]);

    % Affiche le logo de l'universit√© √† gauche du titre
    axesLogo = axes(f, 'Units', 'pixels', 'Position', [30 630 80 50]);
    imshow(imread('t√©l√©chargement.jpeg'), 'Parent', axesLogo); % Charge et affiche l'image
    axis off; % Supprime les axes

    % Cr√©e un panneau de contr√¥le pour les boutons START et STOP
    panelControl = uipanel(f, 'Title', 'Commandes', ...
                           'FontSize', 12, ...
                           'FontWeight', 'bold', ...
                           'BackgroundColor', [0.95 0.95 0.95], ...
                           'Position', [0.35 0.1 0.3 0.15]); % Position en pourcentage (norm.)

    % Bouton START (d√©marrage de la communication UART)
    uicontrol(panelControl, 'Style', 'pushbutton', ...
              'String', '‚ñ∂ START', ...
              'FontSize', 14, ...
              'FontWeight', 'bold', ...
              'Position', [30 30 100 40], ...
              'Callback', @(src, event) envoyerStartUART());

    % Bouton STOP (arr√™t de la communication UART)
    uicontrol(panelControl, 'Style', 'pushbutton', ...
              'String', '‚èπ STOP', ...
              'FontSize', 14, ...
              'FontWeight', 'bold', ...
              'Position', [150 30 100 40], ...
              'Callback', @(src, event) envoyerStopUART());

    % Bouton pour quitter l'application proprement
    uicontrol(f, 'Style', 'pushbutton', ...
              'String', 'Quitter', ...
              'FontSize', 12, ...
              'Position', [10, 10, 100, 30], ...
              'Callback', @(src, event) fermetureApp(f));

    % Zone d'affichage de l'image repr√©sentant la batterie
    axBattery = axes(f, 'Units', 'pixels', 'Position', [350 310 200 250]);
    imgBattery = imshow(imread('battery_0.png'), 'Parent', axBattery); % Charge image batterie vide
    axis off;

    % Cercle (LED) repr√©sentant l'√©tat de charge (couleur variable)
    led = rectangle('Position', [800 620 20 20], ...
                    'Curvature', [1 1], ...              % Forme circulaire
                    'FaceColor', [0.5 0.5 0.5], ...      % Couleur grise par d√©faut
                    'EdgeColor', 'black');               % Bordure noire

    % Texte statique √† c√¥t√© de la LED
    text(750, 622, '√âtat :', 'FontSize', 12, 'FontWeight', 'bold');

    % Affiche un message d'√©tat g√©n√©ral (texte dynamique)
    txtEtat = uicontrol(f, 'Style', 'text', ...
                        'String', '‚è≥ En attente...', ...
                        'FontSize', 14, ...
                        'ForegroundColor', [0 0.5 0], ...  % Vert fonc√©
                        'BackgroundColor', [0.95 0.95 0.95], ...
                        'Position', [300 260 300 30]);

    % Zone d'affichage des valeurs mesur√©es (tension, courant, SOC)
    txtDonnees = uicontrol(f, 'Style', 'text', ...
                           'String', 'Tension: -- V | Courant: -- A | Batterie: -- %', ...
                           'FontSize', 12, ...
                           'FontName', 'Courier New', ...
                           'Position', [220 220 500 30], ...
                           'BackgroundColor', [0.95 0.95 0.95]);

    % Barre grise repr√©sentant la zone de progression SOC
    progressBar = uicontrol(f, 'Style', 'text', ...
                            'Position', [250 180 400 20], ...
                            'BackgroundColor', [0.8 0.8 0.8], ...
                            'HorizontalAlignment', 'left');

    % Barre verte remplie dynamiquement selon le SOC
    fillBar = uicontrol(f, 'Style', 'text', ...
                        'Position', [250 180 0 20], ...      % Largeur 0 au d√©but
                        'BackgroundColor', [0.2 0.7 0.2]);   % Vert

    % Cr√©ation d'un timer pour lire r√©guli√®rement les donn√©es UART
    t = timer('ExecutionMode', 'fixedRate', ...              % Ex√©cution p√©riodique
              'Period', 2.0, ...                              % Toutes les 2 secondes
              'TimerFcn', @(~,~) lireDonneesUART( ...
                  txtDonnees, txtEtat, led, imgBattery, fillBar)); % Appel fonction de lecture

    start(t); % D√©marre le timer
    setappdata(f, 'timerObject', t); % Enregistre le timer dans les donn√©es de l'application

    % D√©finit la fonction appel√©e √† la fermeture de la fen√™tre
    f.CloseRequestFcn = @(src, event) fermetureApp(f);
end

% Fonction de fermeture propre : arr√™te et supprime le timer, puis ferme la fen√™tre
function fermetureApp(fig)
    t = getappdata(fig, 'timerObject'); % R√©cup√®re le timer associ√©
    if isvalid(t)
        stop(t);    % Arr√™te le timer
        delete(t);  % Supprime le timer
    end
    delete(fig);    % Ferme la figure
end